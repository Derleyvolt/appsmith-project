{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "send_credentials",
    "fullyQualifiedName": "getToken.send_credentials",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Login",
    "collectionId": "Login_getToken",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async (username, password) => {\n  let res = await getLoginToken.run({\n    userdata: {\n      'username': username,\n      'password': password\n    }\n  }).catch(() => {\n    showAlert(\"Login ou senha incorretos\");\n    return {};\n  });\n  if (res.hasOwnProperty('access')) {\n    return res;\n  }\n  return {};\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [
        {},
        {}
      ],
      "isAsync": true
    },
    "executeOnLoad": false,
    "clientSideExecution": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async (username, password) => {\n  let res = await getLoginToken.run({\n    userdata: {\n      'username': username,\n      'password': password\n    }\n  }).catch(() => {\n    showAlert(\"Login ou senha incorretos\");\n    return {};\n  });\n  if (res.hasOwnProperty('access')) {\n    return res;\n  }\n  return {};\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Login_getToken.send_credentials",
  "deleted": false,
  "gitSyncId": "637d55b1cbb10813d213d9ed_639b66197b3ff97723bea967"
}