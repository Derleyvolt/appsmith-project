{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "UpdateAndSave",
    "fullyQualifiedName": "InsertAndSaveRow.UpdateAndSave",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Extrato",
    "collectionId": "Extrato_InsertAndSaveRow",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  let data = Table1.tableData.map(e => e);\n  data[Table1.triggeredRowIndex] = Table1.tableData[Table1.triggeredRowIndex];\n  let e;\n  if (!!Table1.updatedRow.id_projeto) {\n    await showAlert('teste');\n    e = Table1.updatedRow;\n  } else {\n    e = data[Table1.triggeredRowIndex];\n  }\n  let parsedObj = {\n    \"data\": e.Data,\n    \"id_favorecido\": parseInt(e.Favorecido.substr(0, e.Favorecido.indexOf(' '))),\n    \"id_rubrica\": e.Rubrica.substr(0, e.Rubrica.indexOf(\" \")),\n    \"tags\": e.Tag.length > 0 ? e.Tag.split(',') : [],\n    \"valor\": e.Valor,\n    \"id_projeto\": e.id_projeto,\n    \"observacao\": e.obs,\n    \"id_movimentacao\": e.tipo_mov,\n    \"data_documento\": e.dataDocumento,\n    \"data_pagamento\": e.dataPagamento\n  };\n  if (e.id != undefined) {\n    await storeValue(\"id_lancamento\", e.id);\n    console.log(parsedObj);\n    await AtualizarLancamentoAPI.run({\n      ExtratoDados: parsedObj\n    }).then(async res => {\n      data[Table1.triggeredRowIndex] = e;\n      await storeValue('favorecido_id', res.id_favorecido);\n      var {cpf, cnpj} = await ObterFavorecidoAPI.run();\n      data[Table1.triggeredRowIndex].Documento = cpf.length > 0 ? cpf : cnpj;\n      await storeValue(\"updateIndex\", []);\n      await storeValue(\"extrato\", data);\n      await showAlert(\"Sucesso\");\n    }).catch(async () => {\n      await showAlert(\"Algum erro ocorreu na atualização dos dados\");\n    });\n  } else {\n    console.log(parsedObj);\n    await CriarLancamentoAPI.run({\n      ExtratoDados: parsedObj\n    }).then(async res => {\n      data[Table1.triggeredRowIndex] = e;\n      data[Table1.triggeredRowIndex].id = res.id;\n      await storeValue('favorecido_id', res.id_favorecido);\n      var {cpf, cnpj} = await ObterFavorecidoAPI.run();\n      data[Table1.triggeredRowIndex].Documento = cpf.length > 0 ? cpf : cnpj;\n      await storeValue(\"updateIndex\", []);\n      await storeValue(\"extrato\", data);\n      await showAlert(\"Sucesso\");\n    }).catch(async () => {\n      await showAlert(\"Algum erro ocorreu na criação dos dados\");\n    });\n  }\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "clientSideExecution": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  let data = Table1.tableData.map(e => e);\n  data[Table1.triggeredRowIndex] = Table1.tableData[Table1.triggeredRowIndex];\n  let e;\n  if (!!Table1.updatedRow.id_projeto) {\n    await showAlert('teste');\n    e = Table1.updatedRow;\n  } else {\n    e = data[Table1.triggeredRowIndex];\n  }\n  let parsedObj = {\n    \"data\": e.Data,\n    \"id_favorecido\": parseInt(e.Favorecido.substr(0, e.Favorecido.indexOf(' '))),\n    \"id_rubrica\": e.Rubrica.substr(0, e.Rubrica.indexOf(\" \")),\n    \"tags\": e.Tag.length > 0 ? e.Tag.split(',') : [],\n    \"valor\": e.Valor,\n    \"id_projeto\": e.id_projeto,\n    \"observacao\": e.obs,\n    \"id_movimentacao\": e.tipo_mov,\n    \"data_documento\": e.dataDocumento,\n    \"data_pagamento\": e.dataPagamento\n  };\n  if (e.id != undefined) {\n    await storeValue(\"id_lancamento\", e.id);\n    console.log(parsedObj);\n    await AtualizarLancamentoAPI.run({\n      ExtratoDados: parsedObj\n    }).then(async res => {\n      data[Table1.triggeredRowIndex] = e;\n      await storeValue('favorecido_id', res.id_favorecido);\n      var {cpf, cnpj} = await ObterFavorecidoAPI.run();\n      data[Table1.triggeredRowIndex].Documento = cpf.length > 0 ? cpf : cnpj;\n      await storeValue(\"updateIndex\", []);\n      await storeValue(\"extrato\", data);\n      await showAlert(\"Sucesso\");\n    }).catch(async () => {\n      await showAlert(\"Algum erro ocorreu na atualização dos dados\");\n    });\n  } else {\n    console.log(parsedObj);\n    await CriarLancamentoAPI.run({\n      ExtratoDados: parsedObj\n    }).then(async res => {\n      data[Table1.triggeredRowIndex] = e;\n      data[Table1.triggeredRowIndex].id = res.id;\n      await storeValue('favorecido_id', res.id_favorecido);\n      var {cpf, cnpj} = await ObterFavorecidoAPI.run();\n      data[Table1.triggeredRowIndex].Documento = cpf.length > 0 ? cpf : cnpj;\n      await storeValue(\"updateIndex\", []);\n      await storeValue(\"extrato\", data);\n      await showAlert(\"Sucesso\");\n    }).catch(async () => {\n      await showAlert(\"Algum erro ocorreu na criação dos dados\");\n    });\n  }\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Extrato_InsertAndSaveRow.UpdateAndSave",
  "deleted": false,
  "gitSyncId": "637d55b1cbb10813d213d9ed_639acc1f5b4b533c8eaa7fdd"
}